#!/usr/bin/env node
/**
 * Parse arguments and store them before everything
 */
const argv = require('yargs').argv;
const parsedArgs = require('../src/lib/parsed-args');
const { allowedArgs } = require('../src/helpers/constants');
Object.values(allowedArgs).forEach( aa => {
  if (!!argv[aa]) {
    parsedArgs.add(aa, argv[aa]);
  }
});

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('hz-dynamic-stylesheets:server');
const http = require('http');
const config = require('../src/lib/config-loader');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
let port;
if (!!parsedArgs.get(allowedArgs.deployPages)) {
  port = normalizePort(config.pages.pagesDeployPort || '3001');
} else {
  port = normalizePort(config.deployPort || '3000');
}
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      // eslint-disable-next-line
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      // eslint-disable-next-line
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, function() {
  // eslint-disable-next-line
  console.log('App running on http://localhost:' + port);
});
server.on('error', onError);
server.on('listening', onListening);

